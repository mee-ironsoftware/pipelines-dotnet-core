trigger: none

parameters:
  - name: skipA
    displayName: Skip stage A
    type: boolean
    default: false
  - name: skipB
    displayName: Skip stage B
    type: boolean
    default: false
  - name: makeBFailed
    displayName: Make stage B failed
    type: boolean
    default: false

pool:
  vmImage: ubuntu-latest

stages:
- stage: A
  condition: eq(${{ parameters.skipA }}, false)
  jobs:
  - job: A1
    steps:
    - bash: |
        # Generate a random port number between 3000 and 6000
        export RANDOM_PORT=$((RANDOM % (6000-3000+1) + 3000))

        # Print the random port for reference
        echo "Random Port: $RANDOM_PORT"

        # Store the random port in an environment variable for later use
        echo "##vso[task.setvariable variable=portNumber;isOutput=true]$RANDOM_PORT"
      displayName: 'GENERATE RANDOM PORT'
      name: DockerPort
    - bash: |
        # Check the status of A1
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          echo "A1 failed or was skipped."
          echo "##vso[task.setvariable variable=testPassed;isOutput=true]false"
        fi
      condition: succeededOrFailed()
      name: testPassed
      displayName: 'Check Job Status'
- stage: B
  dependsOn: A
  condition: eq(${{ parameters.skipB }}, false)
  jobs:
  - job: B1
    variables:
      dockerPortNumber: $[stageDependencies.A.A1.outputs['DockerPort.portNumber']]
    steps:
    - bash: echo '$(dockerPortNumber)'
    - bash: exit 1
      displayName: Fail this step build
      condition: eq(${{ parameters.makeBFailed }}, true)
    - bash: |
        # Check the status of B1
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          echo "B1 failed or was skipped."
          echo "##vso[task.setvariable variable=testPassed;isOutput=true]false"
        fi
      condition: succeededOrFailed()
      name: testPassed
      displayName: 'Check Job Status'
- stage: C
  dependsOn:
  - A
  - B
  condition: always()
  jobs:
  - job: C1
    variables:
      dockerPortNumber: $[stageDependencies.A.A1.outputs['DockerPort.portNumber']]
      allTestsPassed: and(
        $[stageDependencies.A.A1.outputs['testPassed.testPassed']],
        $[stageDependencies.B.B1.outputs['testPassed.testPassed']])
    steps:
      - bash: echo '$(dockerPortNumber)'
      - bash: echo 'JobStatus >>>>> $(stageDependencies.A.A1.JobStatus)'
      - bash: echo '$(Build.RequestedForEmail)'
      - bash: echo $(Agent.JobStatus)
      - bash: echo $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
      - script: |
          echo "All Tests Passed ::: $(allTestsPassed)"
          if [ "$(allTestsPassed)" == "false" ]; then
            echo "Some dependent jobs failed or were skipped."
            exit 1
          else
            echo "All dependent jobs succeeded!"
          fi
