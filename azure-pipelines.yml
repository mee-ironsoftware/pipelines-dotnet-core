trigger: none

parameters:
  - name: skipA
    displayName: Skip stage A
    type: boolean
    default: false
  - name: makeAFailed
    displayName: Make stage A failed
    type: boolean
    default: false
  - name: skipB
    displayName: Skip stage B
    type: boolean
    default: false
  - name: makeBFailed
    displayName: Make stage B failed
    type: boolean
    default: false

pool:
  vmImage: ubuntu-latest

stages:

- stage: A
  condition: eq(${{ parameters.skipA }}, false)
  jobs:
  - job: A1
    steps:
    - checkout: none
    - bash: |
        # Generate a random port number between 3000 and 6000
        export RANDOM_PORT=$((RANDOM % (6000-3000+1) + 3000))

        # Print the random port for reference
        echo "Random Port: $RANDOM_PORT"

        # Store the random port in an environment variable for later use
        echo "##vso[task.setvariable variable=portNumber;isOutput=true]$RANDOM_PORT"
      displayName: 'GENERATE RANDOM PORT'
      name: DockerPort
    - bash: |
        # Check the status of A1
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          echo "A1 failed or was skipped."
          echo "##vso[task.setvariable variable=testPassed;isOutput=true]Failed"
        fi
      condition: succeededOrFailed()
      name: testPassed
      displayName: 'Check Job Status'
- stage: SubA1
  dependsOn: A
  jobs:
  - job: SubA1Job
    steps:
    - checkout: none
- stage: SubA2
  dependsOn: A
  jobs:
  - job: SubA2Job
    steps:
    - checkout: none
    - bash: exit 1
      displayName: Fail this step build
      condition: eq(${{ parameters.makeAFailed }}, true)

- stage: B
  condition: eq(${{ parameters.skipB }}, false)
  jobs:
  - job: B1
    variables:
      dockerPortNumber: $[stageDependencies.A.A1.outputs['DockerPort.portNumber']]
    steps:
    - bash: echo '$(dockerPortNumber)'
    - bash: |
        # Check the status of B1
        if [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          echo "B1 failed or was skipped."
          echo "##vso[task.setvariable variable=testPassed;isOutput=true]Failed"
        fi
      condition: succeededOrFailed()
      name: testPassed
      displayName: 'Check Job Status'
- stage: SubB1
  dependsOn: B
  jobs:
  - job: SubB1Job
    steps:
    - checkout: none
    - bash: exit 1
      displayName: Fail this step build
      condition: eq(${{ parameters.makeBFailed }}, true)
- stage: SubB2
  dependsOn: B
  jobs:
  - job: SubB2Job
    steps:
    - checkout: none


- stage: FailedA
  condition: failed()
  dependsOn:
  - SubA1
  - SubA2
  displayName: 'Trigger when SubA1 and SubA2 failed'
  jobs:
  - job: FailedAJob
    steps:
    - checkout: none
    - bash: echo 'dependsOn SubA1 and SubA2 and condition is failed'
    - bash: echo "##vso[task.setvariable variable=testPassed;isOutput=true]Failed"
      name: testPassed
- stage: succeededA
  condition: or(succeeded(), eq(${{ parameters.skipA }}, false))
  dependsOn:
  - SubA1
  - SubA2
  displayName: 'Trigger when SubA1 and SubA2 succeeded'
  jobs:
  - job: SuceededAJob
    steps:
    - checkout: none
    - bash: echo 'dependsOn SubA1 and SubA2 and condition is succeeded'

- stage: FailedB
  condition: failed()
  dependsOn:
  - SubB1
  - SubB2
  displayName: 'Trigger when SubB1 and SubB2 failed'
  jobs:
  - job: FailedBJob
    steps:
    - checkout: none
    - bash: echo 'dependsOn SubB1 and SubB2 and condition is failed'
    - bash: echo "##vso[task.setvariable variable=testPassed;isOutput=true]Failed"
      name: testPassed
- stage: succeededA
  condition: or(succeeded(), eq(${{ parameters.skipB }}, false))
  dependsOn:
  - SubB1
  - SubB2
  displayName: 'Trigger when SubB1 and SubB2 succeeded'
  jobs:
  - job: SuceededBJob
    steps:
    - checkout: none
    - bash: echo 'dependsOn SubB1 and SubB2 and condition is succeeded'


- stage: C
  dependsOn:
  - FailedA
  - FailedB
  condition: always()
  jobs:
  - job: C1
    variables:
      dockerPortNumber: $[stageDependencies.A.A1.outputs['DockerPort.portNumber']]
      allTestsPassed: $[or(
          eq(stageDependencies.FailedA.FailedAJob.outputs['testPassed.testPassed'], 'Failed'),
          eq(stageDependencies.FailedB.FailedBJob.outputs['testPassed.testPassed'], 'Failed')
        )]
    steps:
      - bash: echo '$(dockerPortNumber)'
      - bash: echo 'JobStatus >>>>> $(stageDependencies.A.A1.JobStatus)'
      - bash: echo '$(Build.RequestedForEmail)'
      - bash: echo $(Agent.JobStatus)
      - bash: echo $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
      - script: |
          echo "All Tests Passed ::: $(allTestsPassed)"
          echo "testPassedA ::: $(testPassedA)"
          echo "testPassedB ::: $(testPassedB)"
          if [ "$(allTestsPassed)" == "false" ]; then
            echo "Some dependent jobs failed or were skipped."
            exit 1
          else
            echo "All dependent jobs succeeded!"
          fi
