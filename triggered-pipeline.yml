trigger: none
pr: none
resources:
  pipelines:
  - pipeline: TestWeeklyBuild
    source: test-weekly-build
    trigger:
      stages:
      - CreateReleaseVersion

parameters:
  - name: ChromeRendererPackageVersion
    displayName: Chrome Renderer Package Version
    type: string
    default: default

variables:
- name: Configuration
  value: 'Debug'
- name: NuGetVersion
  value: '1.0.0'
- name: AssemblyVersion
  value: '1.0.0.0'

pool:
  vmImage: ubuntu-latest

stages:
- stage: GatheringVar
  jobs:
  - job: GatheringVarJob
    steps:
    - ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
      - script: |
          echo 'CI build denition id: $(resources.pipeline.TestWeeklyBuild.pipelineID)'
          echo 'CI build number: $(resources.pipeline.TestWeeklyBuild.runName)'
          echo 'CI build id: $(resources.pipeline.TestWeeklyBuild.runID)'
          echo 'CI build run url: $(resources.pipeline.TestWeeklyBuild.runURI)'
          echo 'CI build branch: $(resources.pipeline.TestWeeklyBuild.sourceBranch)'
          echo 'CI build commit: $(resources.pipeline.TestWeeklyBuild.sourceCommit)'
          echo 'CI build source provider: $(resources.pipeline.TestWeeklyBuild.sourceProvider)'
          echo 'CI build requested by user name: $(resources.pipeline.TestWeeklyBuild.requestedFor)'
          echo 'CI build requested by user id: $(resources.pipeline.TestWeeklyBuild.requestedForID)'
      # Download Version from Build pipeline
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: 'DevOpsTraining'
          definition: '$(resources.pipeline.TestWeeklyBuild.pipelineID)'
          artifactName: 'Versions'
          targetPath: '$(Agent.BuildDirectory)/Versions'
          buildVersionToDownload: 'specific'
          pipelineId: $(resources.pipeline.TestWeeklyBuild.runID)
      - task: LoadXmlVariables@2
        displayName: 'LOAD VERSION INFORMATION'
        inputs:
          XmlSource: '$(Agent.BuildDirectory)/Versions/versions.xml'
          VariablePrefix: 'dep'
          MarkAsSecret: false
      - script: |
          echo "##vso[task.setvariable variable=Configuration;isOutput=true]$(dep_Versions_Configuration)"
          echo "##vso[task.setvariable variable=NuGetVersion;isOutput=true]$(dep_Versions_NuGetVersion)"
          echo "##vso[task.setvariable variable=AssemblyVersion;isOutput=true]$(dep_Versions_AssemblyVersion)"
          echo "##vso[task.setvariable variable=ChromeRendererPackageVersion;isOutput=true]ResourceTrigger"
        name: SetVariables
    - ${{ else }}:
      - script: |
          echo "##vso[task.setvariable variable=Configuration;isOutput=true]$(Configuration)"
          echo "##vso[task.setvariable variable=NuGetVersion;isOutput=true]$(NuGetVersion)"
          echo "##vso[task.setvariable variable=AssemblyVersion;isOutput=true]$(AssemblyVersion)"
          echo "##vso[task.setvariable variable=ChromeRendererPackageVersion;isOutput=true]${{ parameters.ChromeRendererPackageVersion }}"
        name: SetVariables

    - script: |
        echo Build reason ::: $(Build.Reason)
      displayName: 'Run a multi-line script'
    - script: |
        echo Configuration $(Configuration)
        echo NuGetVersion $(NuGetVersion)
        echo AssemblyVersion $(AssemblyVersion)
      displayName: 'DISPLAY DEFAULT VAR'
    - script: |
        echo Configuration $(SetVariables.Configuration)
        echo NuGetVersion $(SetVariables.NuGetVersion)
        echo AssemblyVersion $(SetVariables.AssemblyVersion)
      displayName: 'DISPLAY STEP VAR'
    - script: echo "Run $(SetVariables.ChromeRendererPackageVersion)"
      condition: and(succeeded(), eq(variables['SetVariables.ChromeRendererPackageVersion'], 'ResourceTrigger'))
      displayName: 'ChromeRendererPackageVersion is ResourceTrigger'
    - script: echo "Run $(SetVariables.ChromeRendererPackageVersion)"
      condition: and(succeeded(), eq(variables['SetVariables.ChromeRendererPackageVersion'], 'default'))
      displayName: 'ChromeRendererPackageVersion is default'
    - ${{ if eq(variables['SetVariables.ChromeRendererPackageVersion'], 'ResourceTrigger') }}:
      - script: echo "Run ResourceTrigger in expression condition"

- stage: UsingVar
  jobs:
  - job: UsingVarJob
    variables:
      Configuration: $[stageDependencies.GatheringVar.GatheringVarJob.outputs['SetVariables.Configuration']]
      NuGetVersion: $[stageDependencies.GatheringVar.GatheringVarJob.outputs['SetVariables.NuGetVersion']]
      AssemblyVersion: $[stageDependencies.GatheringVar.GatheringVarJob.outputs['SetVariables.AssemblyVersion']]
    steps:
    - script: |
        echo Configuration $(Configuration)
        echo NuGetVersion $(NuGetVersion)
        echo AssemblyVersion $(AssemblyVersion)
